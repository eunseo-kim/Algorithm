# 언어 : Python
# 날짜 : 2021.07.23
# 문제 : BOJ > 동전 1 (https://www.acmicpc.net/problem/2293)
# 티어 : 실버 1
# =====================================================================================================
# 소요 시간 : -
# 제출 시도 : -
# 풀이 방법 : dp / 동전1은 '경우의 수'를 구하는 문제이고 동전2는 '동전의 최소 개수'를 구하는 문제이다.
# =====================================================================================================
def solution():
    dp = [10001 for _ in range(k + 1)]
    dp[0] = 0

    for i in range(n):
        for num in range(coins[i], k + 1):
            dp[num] = min(dp[num], dp[num - coins[i]] + 1)

    return dp[-1] if dp[-1] != 10001 else -1


n, k = map(int, input().split())
coins = []
for _ in range(n):
    coins.append(int(input()))
answer = solution()
print(answer)

# - 추가 풀이 방법
# 각 동전으로 1, 2, 3 ... k를 만들기 위해서
# 1번 동전으로 1, 2, 3 ... k를 만들고(dp에는 사용한 동전의 개수를 저장한다.)
# 2번 동전으로 1, 2, 3 ... k를 만드는데,
# 1번 동전만 사용한 동전 개수 + 1번동전&2번동전 함께 사용했을 때 동전 개수
# 를 비교해서 더 작은 동전 개수를 dp에 저장한다. (이 과정을 계속 반복)
